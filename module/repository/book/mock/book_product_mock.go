// Code generated by MockGen. DO NOT EDIT.
// Source: module/repository/book/book_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	book "challenges_8/module/model/book"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBookRepository is a mock of BookRepository interface.
type MockBookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookRepositoryMockRecorder
}

// MockBookRepositoryMockRecorder is the mock recorder for MockBookRepository.
type MockBookRepositoryMockRecorder struct {
	mock *MockBookRepository
}

// NewMockBookRepository creates a new mock instance.
func NewMockBookRepository(ctrl *gomock.Controller) *MockBookRepository {
	mock := &MockBookRepository{ctrl: ctrl}
	mock.recorder = &MockBookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookRepository) EXPECT() *MockBookRepositoryMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockBookRepository) CreateBook(ctx context.Context, bookIn book.Book) (book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", ctx, bookIn)
	ret0, _ := ret[0].(book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBookRepositoryMockRecorder) CreateBook(ctx, bookIn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookRepository)(nil).CreateBook), ctx, bookIn)
}

// FindAllBook mocks base method.
func (m *MockBookRepository) FindAllBook(ctx context.Context) ([]book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllBook", ctx)
	ret0, _ := ret[0].([]book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllBook indicates an expected call of FindAllBook.
func (mr *MockBookRepositoryMockRecorder) FindAllBook(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllBook", reflect.TypeOf((*MockBookRepository)(nil).FindAllBook), ctx)
}

// FindByIdBook mocks base method.
func (m *MockBookRepository) FindByIdBook(ctx context.Context, idIn uint64) (book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIdBook", ctx, idIn)
	ret0, _ := ret[0].(book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIdBook indicates an expected call of FindByIdBook.
func (mr *MockBookRepositoryMockRecorder) FindByIdBook(ctx, idIn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIdBook", reflect.TypeOf((*MockBookRepository)(nil).FindByIdBook), ctx, idIn)
}

// FindByIdBookSoftDelete mocks base method.
func (m *MockBookRepository) FindByIdBookSoftDelete(ctx context.Context, idIn uint64) (book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIdBookSoftDelete", ctx, idIn)
	ret0, _ := ret[0].(book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIdBookSoftDelete indicates an expected call of FindByIdBookSoftDelete.
func (mr *MockBookRepositoryMockRecorder) FindByIdBookSoftDelete(ctx, idIn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIdBookSoftDelete", reflect.TypeOf((*MockBookRepository)(nil).FindByIdBookSoftDelete), ctx, idIn)
}

// HardDeleteBook mocks base method.
func (m *MockBookRepository) HardDeleteBook(ctx context.Context, bookId uint64) (book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardDeleteBook", ctx, bookId)
	ret0, _ := ret[0].(book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HardDeleteBook indicates an expected call of HardDeleteBook.
func (mr *MockBookRepositoryMockRecorder) HardDeleteBook(ctx, bookId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardDeleteBook", reflect.TypeOf((*MockBookRepository)(nil).HardDeleteBook), ctx, bookId)
}

// SoftDeleteBook mocks base method.
func (m *MockBookRepository) SoftDeleteBook(ctx context.Context, bookIn book.Book) (book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDeleteBook", ctx, bookIn)
	ret0, _ := ret[0].(book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoftDeleteBook indicates an expected call of SoftDeleteBook.
func (mr *MockBookRepositoryMockRecorder) SoftDeleteBook(ctx, bookIn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeleteBook", reflect.TypeOf((*MockBookRepository)(nil).SoftDeleteBook), ctx, bookIn)
}

// UpdateBook mocks base method.
func (m *MockBookRepository) UpdateBook(ctx context.Context, bookIn book.Book) (book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", ctx, bookIn)
	ret0, _ := ret[0].(book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBookRepositoryMockRecorder) UpdateBook(ctx, bookIn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookRepository)(nil).UpdateBook), ctx, bookIn)
}
